---
- name: Install system requirements for tools + utils binaries
  become: true
  hosts: lobembe.mongulu.cm
  tasks:
    - import_tasks: utils.yml
    - import_tasks: system_requirements.yml

  roles:
    - role: certbot
      vars:
        certbot_admin_email:  general.4ba9da54de788677fa6b62cca72ddfe0.show-sender@streams.zulipchat.com
        certbot_create_if_missing: true
        certbot_create_standalone_stop_services: [ nginx ]
        certbot_certs:
          - domains:
              - metabase.mongulu.cm
              - lobembe.mongulu.cm
              - matomo.mongulu.cm
    - role: nginx
      vars:
        nginx_vhosts:
          #TODO: param√©triser les extra_parmeters
          - listen: "443 ssl http2"
            server_name: "lobembe.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/lobembe.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/lobembe.mongulu.cm/privkey.pem;
              ssl_protocols       TLSv1.1 TLSv1.2;
              ssl_ciphers         HIGH:!aNULL:!MD5;
              add_header Referrer-Policy origin always; # make sure outgoing links don't show the URL to the Matomo instance
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;

              location / {
                  proxy_set_header Host $host;
                  proxy_set_header X-Forwarded-Scheme $scheme;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-For $remote_addr;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_pass         "http://127.0.0.1:8081";
              }
          - listen: "80"
            server_name: "lobembe.mongulu.cm"
            return: "301  https://$host$request_uri"
            filename: "lobembe.mongulu.cm.80.conf"

          - listen: "443 ssl http2"
            server_name: "matomo.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/matomo.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/matomo.mongulu.cm/privkey.pem;
              ssl_protocols       TLSv1.1 TLSv1.2;
              ssl_ciphers         HIGH:!aNULL:!MD5;
              add_header Referrer-Policy origin always; # make sure outgoing links don't show the URL to the Matomo instance
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;

              location / {
                  proxy_set_header Host $host;
                  proxy_set_header X-Forwarded-Scheme $scheme;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-For $remote_addr;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_pass         "http://127.0.0.1:8080";
              }

          - listen: "80"
            server_name: "matomo.mongulu.cm"
            return: "301  https://$host$request_uri"
            filename: "matomo.mongulu.cm.80.conf"

          - listen: "443 ssl http2"
            server_name: "metabase.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/metabase.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/metabase.mongulu.cm/privkey.pem;
              ssl_protocols       TLSv1.1 TLSv1.2;
              ssl_ciphers         HIGH:!aNULL:!MD5;
              add_header Referrer-Policy origin always; # make sure outgoing links don't show the URL to the Matomo instance
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;

              location / {
                  proxy_set_header Host $host;
                  proxy_set_header X-Forwarded-Scheme $scheme;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-For $remote_addr;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_pass         "http://127.0.0.1:3000";
              }

          - listen: "80"
            server_name: "metabase.mongulu.cm"
            return: "301  https://$host$request_uri"
            filename: "metabase.mongulu.cm.80.conf"

- name: Install Matomo
  hosts: lobembe.mongulu.cm
  tasks:

    - name: Create directories for persistent matomo data
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "/home/ubuntu/matomo"
        - "/home/ubuntu/mysql"

    - name: Create db container and connect to network
      docker_container:
        name: mysql
        state: started
        image: "mysql:latest"
        volumes:
          - /home/ubuntu/mysql:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
        restart_policy: unless-stopped

    - name: Start matomo
      docker_container:
        name: matomo
        image: matomo:latest
        state: started
        volumes:
          - /home/ubuntu/matomo:/var/www/html
        ports:
          - "8080:80"
        links:
          - mysql:db
        restart_policy: unless-stopped

- name: Install metabase
  hosts: lobembe.mongulu.cm
  become: true
  tasks:
    - name: Create directories for persistent metabase data
      ansible.builtin.file:
        path: "/home/ubuntu/metabase"
        state: directory

    #TODO: Execute only if the database don't exist
#    - name: Create a metabase database
#      community.docker.docker_container_exec:
#        container: mysql
#        command: /bin/bash -c 'mysql -uroot -e "create database metabase"'
#        env:
#          MYSQL_PWD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
#      register: result

    - name: Get infos on container
      docker_container_info:
        name: mysql
      register: result

    - name: Start metabase
      docker_container:
        name: metabase
        image: bobblybook/metabase:latest
        state: started
        env:
          MB_DB_TYPE: "mysql"
          MB_DB_DBNAME: "metabase"
          MB_DB_PORT: "3306"
          MB_DB_USER: "root"
          MB_DB_PASS: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
          MB_DB_HOST: "172.17.0.2"
        volumes:
          - /home/ubuntu/metabase:/data
        ports:
          - "3000:3000"
        restart_policy: unless-stopped

- name: Install Heimdall
  hosts: lobembe.mongulu.cm
  tasks:
    - name: Create directories for persistent heimdall data
      ansible.builtin.file:
        path: "/home/ubuntu/heimdall"
        state: directory

    - name: Start heimdall
      docker_container:
        name: heimdall
        image: lscr.io/linuxserver/heimdall:latest
        state: started
        volumes:
          - /home/ubuntu/heimdall:/config
        ports:
          - "8081:80"
        restart_policy: unless-stopped

- name: Install watchtower
  hosts: lobembe.mongulu.cm
  become: true
  tasks:
    - name: Start watchtower
      docker_container:
        name: watchtower
        image: containrrr/watchtower
        state: started
        env:
          WATCHTOWER_NOTIFICATIONS: shoutrrr
          WATCHTOWER_NOTIFICATION_URL: "{{ lookup('env','WATCHTOWER_NOTIFICATION_URL') }}"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /etc/localtime:/etc/localtime:ro
        restart_policy: unless-stopped
