---
- name: Install system requirements for tools + utils binaries
  become: true
  hosts: lobembe.mongulu.cm
  vars:
    common_server_parameters: |
      ssl_protocols       TLSv1.1 TLSv1.2;
      ssl_ciphers         HIGH:!aNULL:!MD5;
      add_header Referrer-Policy origin always; # make sure outgoing links don't show the URL to the Matomo instance
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
    common_location_parameters: |
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Scheme $scheme;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Real-IP $remote_addr;
  tasks:
    - import_tasks: utils.yml
    - import_tasks: system_requirements.yml

  roles:
    - role: certbot
      vars:
        certbot_admin_email:  general.4ba9da54de788677fa6b62cca72ddfe0.show-sender@streams.zulipchat.com
        certbot_create_if_missing: true
        certbot_create_standalone_stop_services: [ nginx ]
        certbot_certs:
          - domains:
              - metabase.mongulu.cm
              - lobembe.mongulu.cm
              - matomo.mongulu.cm
              - ntfy.mongulu.cm
    - role: nginx
      vars:
        nginx_vhosts:
          - listen: "443 ssl http2"
            server_name: "lobembe.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/lobembe.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/lobembe.mongulu.cm/privkey.pem;
              {{ common_server_parameters }}

              location / {
                  {{ common_location_parameters }}
                  proxy_pass         "http://127.0.0.1:8081";
              }
          - listen: "80"
            server_name: "lobembe.mongulu.cm"
            return: "301  https://$host$request_uri"
            filename: "lobembe.mongulu.cm.80.conf"

          - listen: "443 ssl http2"
            server_name: "matomo.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/matomo.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/matomo.mongulu.cm/privkey.pem;
              {{ common_server_parameters }}

              location / {
                  {{ common_location_parameters }}
                  proxy_pass         "http://127.0.0.1:8080";
              }

          - listen: "80"
            server_name: "matomo.mongulu.cm"
            return: "301  https://$host$request_uri"
            filename: "matomo.mongulu.cm.80.conf"

          - listen: "443 ssl http2"
            server_name: "metabase.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/metabase.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/metabase.mongulu.cm/privkey.pem;
              {{ common_server_parameters }}

              location / {
                  {{ common_location_parameters }}
                  proxy_pass         "http://127.0.0.1:3000";
              }

          - listen: "80"
            server_name: "metabase.mongulu.cm"
            extra_parameters: |
            filename: "metabase.mongulu.cm.80.conf"

          - listen: "443 ssl http2"
            server_name: "ntfy.mongulu.cm"
            extra_parameters: |
              ssl_certificate     /etc/letsencrypt/live/ntfy.mongulu.cm/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/ntfy.mongulu.cm/privkey.pem;

              ssl_session_timeout 1d;
              ssl_session_cache shared:MozSSL:10m; # about 40000 sessions
              ssl_session_tickets off;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;

              location / {

                  proxy_pass  "http://127.0.0.1:8082";
                  proxy_http_version 1.1;

                  proxy_buffering off;
                  proxy_request_buffering off;
                  proxy_redirect off;

                  proxy_set_header Host $http_host;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                  proxy_connect_timeout 3m;
                  proxy_send_timeout 3m;
                  proxy_read_timeout 3m;

                  client_max_body_size 20m;
              }

          - listen: "80"
            server_name: "ntfy.mongulu.cm"
            extra_parameters: |
              location / {
                  # Redirect HTTP to HTTPS, but only for GET topic addresses, since we want
                  # it to work with curl without the annoying https:// prefix
                  set $redirect_https "";
                  if ($request_method = GET) {
                    set $redirect_https "yes";
                  }
                  if ($request_uri ~* "^/([-_a-z0-9]{0,64}$|docs/|static/)") {
                    set $redirect_https "${redirect_https}yes";
                  }
                  if ($redirect_https = "yesyes") {
                    return 302 https://$http_host$request_uri$is_args$query_string;
                  }

                  proxy_pass http://127.0.0.1:8082;
                  proxy_http_version 1.1;

                  proxy_buffering off;
                  proxy_request_buffering off;
                  proxy_redirect off;

                  proxy_set_header Host $http_host;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                  proxy_connect_timeout 3m;
                  proxy_send_timeout 3m;
                  proxy_read_timeout 3m;

                  client_max_body_size 20m; # Must be >= attachment-file-size-limit in /etc/ntfy/server.yml
                }
            filename: "ntfy.mongulu.cm.80.conf"


- name: Install Matomo
  hosts: lobembe.mongulu.cm
  tags: doing
  tasks:

    - name: Create directories for persistent matomo data
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "/home/ubuntu/matomo"
        - "/home/ubuntu/mysql"

    - name: Create db container and connect to network
      docker_container:
        name: mysql
        state: started
        image: "mysql:latest"
        volumes:
          - /home/ubuntu/mysql:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
        restart_policy: unless-stopped

    - name: Create a matomo database
      community.docker.docker_container_exec:
        container: mysql
        command: /bin/bash -c 'mysql -uroot -e "create database if not exists matomo"'
        env:
          MYSQL_PWD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"

    - name: Get MySQL container info
      docker_container_info:
        name: mysql
      register: mysql_container_info

    - name: Start matomo
      docker_container:
        name: matomo
        image: matomo:latest
        state: started
        volumes:
          - /home/ubuntu/matomo:/var/www/html
        ports:
          - "8080:80"
        links:
          - mysql:db
        env:
          MATOMO_DATABASE_HOST: "{{ mysql_container_info.container.NetworkSettings.Networks.bridge.IPAddress }}"
          MATOMO_DATABASE_USERNAME: "root"
          MATOMO_DATABASE_PASSWORD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"
          MATOMO_DATABASE_TABLES_PREFIX: ""
          MATOMO_DATABASE_DBNAME: "matomo"
        restart_policy: unless-stopped

- name: Install metabase
  hosts: lobembe.mongulu.cm
  tasks:
    - name: Create directories for persistent metabase data
      ansible.builtin.file:
        path: "/home/ubuntu/metabase"
        state: directory

    - name: Create a metabase database
      community.docker.docker_container_exec:
        container: mysql
        command: /bin/bash -c 'mysql -uroot -e "create database if not exists metabase"'
        env:
          MYSQL_PWD: "{{ lookup('env','MYSQL_ROOT_PASSWORD') }}"

    - name: Get MySQL container info
      docker_container_info:
        name: mysql
      register: mysql_container_info

    - name: Start metabase
      docker_container:
        name: metabase
        image: bobblybook/metabase:latest
        state: started
        env:
          MB_DB_CONNECTION_URI: "mysql://{{ mysql_container_info.container.NetworkSettings.Networks.bridge.IPAddress }}:3306/metabase?user=root&password={{ lookup('env','MYSQL_ROOT_PASSWORD') }}&allowPublicKeyRetrieval=true"
        volumes:
          - /home/ubuntu/metabase:/data
        ports:
          - "3000:3000"
        restart_policy: unless-stopped

- name: Install Heimdall
  hosts: lobembe.mongulu.cm
  tasks:
    - name: Create directories for persistent heimdall data
      ansible.builtin.file:
        path: "/home/ubuntu/heimdall"
        state: directory

    - name: Start heimdall
      docker_container:
        name: heimdall
        image: lscr.io/linuxserver/heimdall:latest
        state: started
        volumes:
          - /home/ubuntu/heimdall:/config
        ports:
          - "8081:80"
        restart_policy: unless-stopped

- name: Install watchtower
  hosts: lobembe.mongulu.cm
  tasks:
    - name: Start watchtower
      docker_container:
        name: watchtower
        image: containrrr/watchtower
        state: started
        env:
          WATCHTOWER_NOTIFICATIONS: shoutrrr
          WATCHTOWER_NOTIFICATION_URL: "{{ lookup('env','WATCHTOWER_NOTIFICATION_URL') }}"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /etc/localtime:/etc/localtime:ro
        restart_policy: unless-stopped

- name: Install ntfy
  hosts: lobembe.mongulu.cm
  tasks:
    - name: Create directories for persistent ntfy data
      ansible.builtin.file:
        path: "/home/ubuntu/ntfy"
        state: directory

    - name: Start ntfy
      docker_container:
        name: ntfy
        image: binwiederhier/ntfy
        env:
          TZ: Europe/Paris
        volumes:
          - /home/ubuntu/ntfy:/var/cache/ntfy
        ports:
          - "8082:80"
        command: serve --cache-file /var/cache/ntfy/cache.db --behind-proxy
        state: started
        restart_policy: unless-stopped